// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/agent/app/config/config_grpc.pb.go

// Package config is a generated GoMock package.
package config

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSyncConfigServiceClient is a mock of SyncConfigServiceClient interface.
type MockSyncConfigServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSyncConfigServiceClientMockRecorder
}

// MockSyncConfigServiceClientMockRecorder is the mock recorder for MockSyncConfigServiceClient.
type MockSyncConfigServiceClientMockRecorder struct {
	mock *MockSyncConfigServiceClient
}

// NewMockSyncConfigServiceClient creates a new mock instance.
func NewMockSyncConfigServiceClient(ctrl *gomock.Controller) *MockSyncConfigServiceClient {
	mock := &MockSyncConfigServiceClient{ctrl: ctrl}
	mock.recorder = &MockSyncConfigServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncConfigServiceClient) EXPECT() *MockSyncConfigServiceClientMockRecorder {
	return m.recorder
}

// RewriteConfig mocks base method.
func (m *MockSyncConfigServiceClient) RewriteConfig(ctx context.Context, in *RewriteConfigRequest, opts ...grpc.CallOption) (*RewriteConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RewriteConfig", varargs...)
	ret0, _ := ret[0].(*RewriteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RewriteConfig indicates an expected call of RewriteConfig.
func (mr *MockSyncConfigServiceClientMockRecorder) RewriteConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewriteConfig", reflect.TypeOf((*MockSyncConfigServiceClient)(nil).RewriteConfig), varargs...)
}

// SyncConfig mocks base method.
func (m *MockSyncConfigServiceClient) SyncConfig(ctx context.Context, in *SyncConfigRequest, opts ...grpc.CallOption) (*SyncConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncConfig", varargs...)
	ret0, _ := ret[0].(*SyncConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncConfig indicates an expected call of SyncConfig.
func (mr *MockSyncConfigServiceClientMockRecorder) SyncConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncConfig", reflect.TypeOf((*MockSyncConfigServiceClient)(nil).SyncConfig), varargs...)
}

// MockSyncConfigServiceServer is a mock of SyncConfigServiceServer interface.
type MockSyncConfigServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncConfigServiceServerMockRecorder
}

// MockSyncConfigServiceServerMockRecorder is the mock recorder for MockSyncConfigServiceServer.
type MockSyncConfigServiceServerMockRecorder struct {
	mock *MockSyncConfigServiceServer
}

// NewMockSyncConfigServiceServer creates a new mock instance.
func NewMockSyncConfigServiceServer(ctrl *gomock.Controller) *MockSyncConfigServiceServer {
	mock := &MockSyncConfigServiceServer{ctrl: ctrl}
	mock.recorder = &MockSyncConfigServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncConfigServiceServer) EXPECT() *MockSyncConfigServiceServerMockRecorder {
	return m.recorder
}

// RewriteConfig mocks base method.
func (m *MockSyncConfigServiceServer) RewriteConfig(arg0 context.Context, arg1 *RewriteConfigRequest) (*RewriteConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RewriteConfig", arg0, arg1)
	ret0, _ := ret[0].(*RewriteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RewriteConfig indicates an expected call of RewriteConfig.
func (mr *MockSyncConfigServiceServerMockRecorder) RewriteConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewriteConfig", reflect.TypeOf((*MockSyncConfigServiceServer)(nil).RewriteConfig), arg0, arg1)
}

// SyncConfig mocks base method.
func (m *MockSyncConfigServiceServer) SyncConfig(arg0 context.Context, arg1 *SyncConfigRequest) (*SyncConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncConfig", arg0, arg1)
	ret0, _ := ret[0].(*SyncConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncConfig indicates an expected call of SyncConfig.
func (mr *MockSyncConfigServiceServerMockRecorder) SyncConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncConfig", reflect.TypeOf((*MockSyncConfigServiceServer)(nil).SyncConfig), arg0, arg1)
}

// mustEmbedUnimplementedSyncConfigServiceServer mocks base method.
func (m *MockSyncConfigServiceServer) mustEmbedUnimplementedSyncConfigServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSyncConfigServiceServer")
}

// mustEmbedUnimplementedSyncConfigServiceServer indicates an expected call of mustEmbedUnimplementedSyncConfigServiceServer.
func (mr *MockSyncConfigServiceServerMockRecorder) mustEmbedUnimplementedSyncConfigServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSyncConfigServiceServer", reflect.TypeOf((*MockSyncConfigServiceServer)(nil).mustEmbedUnimplementedSyncConfigServiceServer))
}

// MockUnsafeSyncConfigServiceServer is a mock of UnsafeSyncConfigServiceServer interface.
type MockUnsafeSyncConfigServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSyncConfigServiceServerMockRecorder
}

// MockUnsafeSyncConfigServiceServerMockRecorder is the mock recorder for MockUnsafeSyncConfigServiceServer.
type MockUnsafeSyncConfigServiceServerMockRecorder struct {
	mock *MockUnsafeSyncConfigServiceServer
}

// NewMockUnsafeSyncConfigServiceServer creates a new mock instance.
func NewMockUnsafeSyncConfigServiceServer(ctrl *gomock.Controller) *MockUnsafeSyncConfigServiceServer {
	mock := &MockUnsafeSyncConfigServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSyncConfigServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSyncConfigServiceServer) EXPECT() *MockUnsafeSyncConfigServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSyncConfigServiceServer mocks base method.
func (m *MockUnsafeSyncConfigServiceServer) mustEmbedUnimplementedSyncConfigServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSyncConfigServiceServer")
}

// mustEmbedUnimplementedSyncConfigServiceServer indicates an expected call of mustEmbedUnimplementedSyncConfigServiceServer.
func (mr *MockUnsafeSyncConfigServiceServerMockRecorder) mustEmbedUnimplementedSyncConfigServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSyncConfigServiceServer", reflect.TypeOf((*MockUnsafeSyncConfigServiceServer)(nil).mustEmbedUnimplementedSyncConfigServiceServer))
}
