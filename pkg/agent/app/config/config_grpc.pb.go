// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncConfigServiceClient is the client API for SyncConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncConfigServiceClient interface {
	SyncConfig(ctx context.Context, in *SyncConfigRequest, opts ...grpc.CallOption) (*SyncConfigResponse, error)
	RewriteConfig(ctx context.Context, in *RewriteConfigRequest, opts ...grpc.CallOption) (*RewriteConfigResponse, error)
}

type syncConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncConfigServiceClient(cc grpc.ClientConnInterface) SyncConfigServiceClient {
	return &syncConfigServiceClient{cc}
}

func (c *syncConfigServiceClient) SyncConfig(ctx context.Context, in *SyncConfigRequest, opts ...grpc.CallOption) (*SyncConfigResponse, error) {
	out := new(SyncConfigResponse)
	err := c.cc.Invoke(ctx, "/config.SyncConfigService/SyncConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncConfigServiceClient) RewriteConfig(ctx context.Context, in *RewriteConfigRequest, opts ...grpc.CallOption) (*RewriteConfigResponse, error) {
	out := new(RewriteConfigResponse)
	err := c.cc.Invoke(ctx, "/config.SyncConfigService/RewriteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncConfigServiceServer is the server API for SyncConfigService service.
// All implementations must embed UnimplementedSyncConfigServiceServer
// for forward compatibility
type SyncConfigServiceServer interface {
	SyncConfig(context.Context, *SyncConfigRequest) (*SyncConfigResponse, error)
	RewriteConfig(context.Context, *RewriteConfigRequest) (*RewriteConfigResponse, error)
	mustEmbedUnimplementedSyncConfigServiceServer()
}

// UnimplementedSyncConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncConfigServiceServer struct {
}

func (UnimplementedSyncConfigServiceServer) SyncConfig(context.Context, *SyncConfigRequest) (*SyncConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncConfig not implemented")
}
func (UnimplementedSyncConfigServiceServer) RewriteConfig(context.Context, *RewriteConfigRequest) (*RewriteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewriteConfig not implemented")
}
func (UnimplementedSyncConfigServiceServer) mustEmbedUnimplementedSyncConfigServiceServer() {}

// UnsafeSyncConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncConfigServiceServer will
// result in compilation errors.
type UnsafeSyncConfigServiceServer interface {
	mustEmbedUnimplementedSyncConfigServiceServer()
}

func RegisterSyncConfigServiceServer(s grpc.ServiceRegistrar, srv SyncConfigServiceServer) {
	s.RegisterService(&SyncConfigService_ServiceDesc, srv)
}

func _SyncConfigService_SyncConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfigServiceServer).SyncConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SyncConfigService/SyncConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfigServiceServer).SyncConfig(ctx, req.(*SyncConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncConfigService_RewriteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewriteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncConfigServiceServer).RewriteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SyncConfigService/RewriteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncConfigServiceServer).RewriteConfig(ctx, req.(*RewriteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncConfigService_ServiceDesc is the grpc.ServiceDesc for SyncConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.SyncConfigService",
	HandlerType: (*SyncConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncConfig",
			Handler:    _SyncConfigService_SyncConfig_Handler,
		},
		{
			MethodName: "RewriteConfig",
			Handler:    _SyncConfigService_RewriteConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/agent/app/config/pb/config.proto",
}
