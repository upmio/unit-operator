// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/agent/app/service/service_grpc.pb.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServiceLifecycleClient is a mock of ServiceLifecycleClient interface.
type MockServiceLifecycleClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLifecycleClientMockRecorder
}

// MockServiceLifecycleClientMockRecorder is the mock recorder for MockServiceLifecycleClient.
type MockServiceLifecycleClientMockRecorder struct {
	mock *MockServiceLifecycleClient
}

// NewMockServiceLifecycleClient creates a new mock instance.
func NewMockServiceLifecycleClient(ctrl *gomock.Controller) *MockServiceLifecycleClient {
	mock := &MockServiceLifecycleClient{ctrl: ctrl}
	mock.recorder = &MockServiceLifecycleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLifecycleClient) EXPECT() *MockServiceLifecycleClientMockRecorder {
	return m.recorder
}

// GetServiceStatus mocks base method.
func (m *MockServiceLifecycleClient) GetServiceStatus(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceStatus", varargs...)
	ret0, _ := ret[0].(*ServiceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceStatus indicates an expected call of GetServiceStatus.
func (mr *MockServiceLifecycleClientMockRecorder) GetServiceStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceStatus", reflect.TypeOf((*MockServiceLifecycleClient)(nil).GetServiceStatus), varargs...)
}

// RestartService mocks base method.
func (m *MockServiceLifecycleClient) RestartService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartService", varargs...)
	ret0, _ := ret[0].(*ServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartService indicates an expected call of RestartService.
func (mr *MockServiceLifecycleClientMockRecorder) RestartService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartService", reflect.TypeOf((*MockServiceLifecycleClient)(nil).RestartService), varargs...)
}

// StartService mocks base method.
func (m *MockServiceLifecycleClient) StartService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartService", varargs...)
	ret0, _ := ret[0].(*ServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartService indicates an expected call of StartService.
func (mr *MockServiceLifecycleClientMockRecorder) StartService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockServiceLifecycleClient)(nil).StartService), varargs...)
}

// StopService mocks base method.
func (m *MockServiceLifecycleClient) StopService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopService", varargs...)
	ret0, _ := ret[0].(*ServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopService indicates an expected call of StopService.
func (mr *MockServiceLifecycleClientMockRecorder) StopService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockServiceLifecycleClient)(nil).StopService), varargs...)
}

// MockServiceLifecycleServer is a mock of ServiceLifecycleServer interface.
type MockServiceLifecycleServer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLifecycleServerMockRecorder
}

// MockServiceLifecycleServerMockRecorder is the mock recorder for MockServiceLifecycleServer.
type MockServiceLifecycleServerMockRecorder struct {
	mock *MockServiceLifecycleServer
}

// NewMockServiceLifecycleServer creates a new mock instance.
func NewMockServiceLifecycleServer(ctrl *gomock.Controller) *MockServiceLifecycleServer {
	mock := &MockServiceLifecycleServer{ctrl: ctrl}
	mock.recorder = &MockServiceLifecycleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLifecycleServer) EXPECT() *MockServiceLifecycleServerMockRecorder {
	return m.recorder
}

// GetServiceStatus mocks base method.
func (m *MockServiceLifecycleServer) GetServiceStatus(arg0 context.Context, arg1 *ServiceRequest) (*ServiceStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceStatus", arg0, arg1)
	ret0, _ := ret[0].(*ServiceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceStatus indicates an expected call of GetServiceStatus.
func (mr *MockServiceLifecycleServerMockRecorder) GetServiceStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceStatus", reflect.TypeOf((*MockServiceLifecycleServer)(nil).GetServiceStatus), arg0, arg1)
}

// RestartService mocks base method.
func (m *MockServiceLifecycleServer) RestartService(arg0 context.Context, arg1 *ServiceRequest) (*ServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartService", arg0, arg1)
	ret0, _ := ret[0].(*ServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartService indicates an expected call of RestartService.
func (mr *MockServiceLifecycleServerMockRecorder) RestartService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartService", reflect.TypeOf((*MockServiceLifecycleServer)(nil).RestartService), arg0, arg1)
}

// StartService mocks base method.
func (m *MockServiceLifecycleServer) StartService(arg0 context.Context, arg1 *ServiceRequest) (*ServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartService", arg0, arg1)
	ret0, _ := ret[0].(*ServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartService indicates an expected call of StartService.
func (mr *MockServiceLifecycleServerMockRecorder) StartService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockServiceLifecycleServer)(nil).StartService), arg0, arg1)
}

// StopService mocks base method.
func (m *MockServiceLifecycleServer) StopService(arg0 context.Context, arg1 *ServiceRequest) (*ServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopService", arg0, arg1)
	ret0, _ := ret[0].(*ServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopService indicates an expected call of StopService.
func (mr *MockServiceLifecycleServerMockRecorder) StopService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockServiceLifecycleServer)(nil).StopService), arg0, arg1)
}

// mustEmbedUnimplementedServiceLifecycleServer mocks base method.
func (m *MockServiceLifecycleServer) mustEmbedUnimplementedServiceLifecycleServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServiceLifecycleServer")
}

// mustEmbedUnimplementedServiceLifecycleServer indicates an expected call of mustEmbedUnimplementedServiceLifecycleServer.
func (mr *MockServiceLifecycleServerMockRecorder) mustEmbedUnimplementedServiceLifecycleServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServiceLifecycleServer", reflect.TypeOf((*MockServiceLifecycleServer)(nil).mustEmbedUnimplementedServiceLifecycleServer))
}

// MockUnsafeServiceLifecycleServer is a mock of UnsafeServiceLifecycleServer interface.
type MockUnsafeServiceLifecycleServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeServiceLifecycleServerMockRecorder
}

// MockUnsafeServiceLifecycleServerMockRecorder is the mock recorder for MockUnsafeServiceLifecycleServer.
type MockUnsafeServiceLifecycleServerMockRecorder struct {
	mock *MockUnsafeServiceLifecycleServer
}

// NewMockUnsafeServiceLifecycleServer creates a new mock instance.
func NewMockUnsafeServiceLifecycleServer(ctrl *gomock.Controller) *MockUnsafeServiceLifecycleServer {
	mock := &MockUnsafeServiceLifecycleServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeServiceLifecycleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeServiceLifecycleServer) EXPECT() *MockUnsafeServiceLifecycleServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedServiceLifecycleServer mocks base method.
func (m *MockUnsafeServiceLifecycleServer) mustEmbedUnimplementedServiceLifecycleServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServiceLifecycleServer")
}

// mustEmbedUnimplementedServiceLifecycleServer indicates an expected call of mustEmbedUnimplementedServiceLifecycleServer.
func (mr *MockUnsafeServiceLifecycleServerMockRecorder) mustEmbedUnimplementedServiceLifecycleServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServiceLifecycleServer", reflect.TypeOf((*MockUnsafeServiceLifecycleServer)(nil).mustEmbedUnimplementedServiceLifecycleServer))
}
