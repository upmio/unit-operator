// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package postgresql

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostgresqlOperationClient is the client API for PostgresqlOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgresqlOperationClient interface {
	PhysicalBackup(ctx context.Context, in *PhysicalBackupRequest, opts ...grpc.CallOption) (*Response, error)
	LogicalBackup(ctx context.Context, in *LogicalBackupRequest, opts ...grpc.CallOption) (*Response, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Response, error)
}

type postgresqlOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgresqlOperationClient(cc grpc.ClientConnInterface) PostgresqlOperationClient {
	return &postgresqlOperationClient{cc}
}

func (c *postgresqlOperationClient) PhysicalBackup(ctx context.Context, in *PhysicalBackupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/postgresql.PostgresqlOperation/PhysicalBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresqlOperationClient) LogicalBackup(ctx context.Context, in *LogicalBackupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/postgresql.PostgresqlOperation/LogicalBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresqlOperationClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/postgresql.PostgresqlOperation/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgresqlOperationServer is the server API for PostgresqlOperation service.
// All implementations must embed UnimplementedPostgresqlOperationServer
// for forward compatibility
type PostgresqlOperationServer interface {
	PhysicalBackup(context.Context, *PhysicalBackupRequest) (*Response, error)
	LogicalBackup(context.Context, *LogicalBackupRequest) (*Response, error)
	Restore(context.Context, *RestoreRequest) (*Response, error)
	mustEmbedUnimplementedPostgresqlOperationServer()
}

// UnimplementedPostgresqlOperationServer must be embedded to have forward compatible implementations.
type UnimplementedPostgresqlOperationServer struct {
}

func (UnimplementedPostgresqlOperationServer) PhysicalBackup(context.Context, *PhysicalBackupRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhysicalBackup not implemented")
}
func (UnimplementedPostgresqlOperationServer) LogicalBackup(context.Context, *LogicalBackupRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicalBackup not implemented")
}
func (UnimplementedPostgresqlOperationServer) Restore(context.Context, *RestoreRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedPostgresqlOperationServer) mustEmbedUnimplementedPostgresqlOperationServer() {}

// UnsafePostgresqlOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgresqlOperationServer will
// result in compilation errors.
type UnsafePostgresqlOperationServer interface {
	mustEmbedUnimplementedPostgresqlOperationServer()
}

func RegisterPostgresqlOperationServer(s grpc.ServiceRegistrar, srv PostgresqlOperationServer) {
	s.RegisterService(&PostgresqlOperation_ServiceDesc, srv)
}

func _PostgresqlOperation_PhysicalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhysicalBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresqlOperationServer).PhysicalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresql.PostgresqlOperation/PhysicalBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresqlOperationServer).PhysicalBackup(ctx, req.(*PhysicalBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresqlOperation_LogicalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicalBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresqlOperationServer).LogicalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresql.PostgresqlOperation/LogicalBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresqlOperationServer).LogicalBackup(ctx, req.(*LogicalBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresqlOperation_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresqlOperationServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresql.PostgresqlOperation/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresqlOperationServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostgresqlOperation_ServiceDesc is the grpc.ServiceDesc for PostgresqlOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostgresqlOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postgresql.PostgresqlOperation",
	HandlerType: (*PostgresqlOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PhysicalBackup",
			Handler:    _PostgresqlOperation_PhysicalBackup_Handler,
		},
		{
			MethodName: "LogicalBackup",
			Handler:    _PostgresqlOperation_LogicalBackup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _PostgresqlOperation_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/agent/app/postgresql/pb/postgresql.proto",
}
