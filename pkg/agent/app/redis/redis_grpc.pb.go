// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package redis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedisOperationClient is the client API for RedisOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisOperationClient interface {
	SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*Response, error)
}

type redisOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisOperationClient(cc grpc.ClientConnInterface) RedisOperationClient {
	return &redisOperationClient{cc}
}

func (c *redisOperationClient) SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/redis.RedisOperation/SetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisOperationServer is the server API for RedisOperation service.
// All implementations must embed UnimplementedRedisOperationServer
// for forward compatibility
type RedisOperationServer interface {
	SetVariable(context.Context, *SetVariableRequest) (*Response, error)
	mustEmbedUnimplementedRedisOperationServer()
}

// UnimplementedRedisOperationServer must be embedded to have forward compatible implementations.
type UnimplementedRedisOperationServer struct {
}

func (UnimplementedRedisOperationServer) SetVariable(context.Context, *SetVariableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedRedisOperationServer) mustEmbedUnimplementedRedisOperationServer() {}

// UnsafeRedisOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisOperationServer will
// result in compilation errors.
type UnsafeRedisOperationServer interface {
	mustEmbedUnimplementedRedisOperationServer()
}

func RegisterRedisOperationServer(s grpc.ServiceRegistrar, srv RedisOperationServer) {
	s.RegisterService(&RedisOperation_ServiceDesc, srv)
}

func _RedisOperation_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisOperationServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis.RedisOperation/SetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisOperationServer).SetVariable(ctx, req.(*SetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisOperation_ServiceDesc is the grpc.ServiceDesc for RedisOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redis.RedisOperation",
	HandlerType: (*RedisOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVariable",
			Handler:    _RedisOperation_SetVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/agent/app/redis/pb/redis.proto",
}
