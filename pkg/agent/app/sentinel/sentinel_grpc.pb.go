// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sentinel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SentinelOperationClient is the client API for SentinelOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentinelOperationClient interface {
	UpdateRedisReplication(ctx context.Context, in *UpdateRedisReplicationRequest, opts ...grpc.CallOption) (*Response, error)
	SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*Response, error)
}

type sentinelOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewSentinelOperationClient(cc grpc.ClientConnInterface) SentinelOperationClient {
	return &sentinelOperationClient{cc}
}

func (c *sentinelOperationClient) UpdateRedisReplication(ctx context.Context, in *UpdateRedisReplicationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sentinel.SentinelOperation/UpdateRedisReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelOperationClient) SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sentinel.SentinelOperation/SetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentinelOperationServer is the server API for SentinelOperation service.
// All implementations must embed UnimplementedSentinelOperationServer
// for forward compatibility
type SentinelOperationServer interface {
	UpdateRedisReplication(context.Context, *UpdateRedisReplicationRequest) (*Response, error)
	SetVariable(context.Context, *SetVariableRequest) (*Response, error)
	mustEmbedUnimplementedSentinelOperationServer()
}

// UnimplementedSentinelOperationServer must be embedded to have forward compatible implementations.
type UnimplementedSentinelOperationServer struct {
}

func (UnimplementedSentinelOperationServer) UpdateRedisReplication(context.Context, *UpdateRedisReplicationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRedisReplication not implemented")
}
func (UnimplementedSentinelOperationServer) SetVariable(context.Context, *SetVariableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedSentinelOperationServer) mustEmbedUnimplementedSentinelOperationServer() {}

// UnsafeSentinelOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentinelOperationServer will
// result in compilation errors.
type UnsafeSentinelOperationServer interface {
	mustEmbedUnimplementedSentinelOperationServer()
}

func RegisterSentinelOperationServer(s grpc.ServiceRegistrar, srv SentinelOperationServer) {
	s.RegisterService(&SentinelOperation_ServiceDesc, srv)
}

func _SentinelOperation_UpdateRedisReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRedisReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelOperationServer).UpdateRedisReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.SentinelOperation/UpdateRedisReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelOperationServer).UpdateRedisReplication(ctx, req.(*UpdateRedisReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentinelOperation_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelOperationServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.SentinelOperation/SetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelOperationServer).SetVariable(ctx, req.(*SetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SentinelOperation_ServiceDesc is the grpc.ServiceDesc for SentinelOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentinelOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentinel.SentinelOperation",
	HandlerType: (*SentinelOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRedisReplication",
			Handler:    _SentinelOperation_UpdateRedisReplication_Handler,
		},
		{
			MethodName: "SetVariable",
			Handler:    _SentinelOperation_SetVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/agent/app/sentinel/pb/sentinel.proto",
}
