// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mysql

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MysqlOperationClient is the client API for MysqlOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MysqlOperationClient interface {
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*Response, error)
	PhysicalBackup(ctx context.Context, in *PhysicalBackupRequest, opts ...grpc.CallOption) (*Response, error)
	LogicalBackup(ctx context.Context, in *LogicalBackupRequest, opts ...grpc.CallOption) (*Response, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Response, error)
	GtidPurge(ctx context.Context, in *GtidPurgeRequest, opts ...grpc.CallOption) (*Response, error)
	SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*Response, error)
}

type mysqlOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewMysqlOperationClient(cc grpc.ClientConnInterface) MysqlOperationClient {
	return &mysqlOperationClient{cc}
}

func (c *mysqlOperationClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mysql.MysqlOperation/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlOperationClient) PhysicalBackup(ctx context.Context, in *PhysicalBackupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mysql.MysqlOperation/PhysicalBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlOperationClient) LogicalBackup(ctx context.Context, in *LogicalBackupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mysql.MysqlOperation/LogicalBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlOperationClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mysql.MysqlOperation/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlOperationClient) GtidPurge(ctx context.Context, in *GtidPurgeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mysql.MysqlOperation/GtidPurge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mysqlOperationClient) SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mysql.MysqlOperation/SetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MysqlOperationServer is the server API for MysqlOperation service.
// All implementations must embed UnimplementedMysqlOperationServer
// for forward compatibility
type MysqlOperationServer interface {
	Clone(context.Context, *CloneRequest) (*Response, error)
	PhysicalBackup(context.Context, *PhysicalBackupRequest) (*Response, error)
	LogicalBackup(context.Context, *LogicalBackupRequest) (*Response, error)
	Restore(context.Context, *RestoreRequest) (*Response, error)
	GtidPurge(context.Context, *GtidPurgeRequest) (*Response, error)
	SetVariable(context.Context, *SetVariableRequest) (*Response, error)
	mustEmbedUnimplementedMysqlOperationServer()
}

// UnimplementedMysqlOperationServer must be embedded to have forward compatible implementations.
type UnimplementedMysqlOperationServer struct {
}

func (UnimplementedMysqlOperationServer) Clone(context.Context, *CloneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedMysqlOperationServer) PhysicalBackup(context.Context, *PhysicalBackupRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhysicalBackup not implemented")
}
func (UnimplementedMysqlOperationServer) LogicalBackup(context.Context, *LogicalBackupRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicalBackup not implemented")
}
func (UnimplementedMysqlOperationServer) Restore(context.Context, *RestoreRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedMysqlOperationServer) GtidPurge(context.Context, *GtidPurgeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GtidPurge not implemented")
}
func (UnimplementedMysqlOperationServer) SetVariable(context.Context, *SetVariableRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedMysqlOperationServer) mustEmbedUnimplementedMysqlOperationServer() {}

// UnsafeMysqlOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MysqlOperationServer will
// result in compilation errors.
type UnsafeMysqlOperationServer interface {
	mustEmbedUnimplementedMysqlOperationServer()
}

func RegisterMysqlOperationServer(s grpc.ServiceRegistrar, srv MysqlOperationServer) {
	s.RegisterService(&MysqlOperation_ServiceDesc, srv)
}

func _MysqlOperation_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlOperationServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysql.MysqlOperation/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlOperationServer).Clone(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlOperation_PhysicalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhysicalBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlOperationServer).PhysicalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysql.MysqlOperation/PhysicalBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlOperationServer).PhysicalBackup(ctx, req.(*PhysicalBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlOperation_LogicalBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicalBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlOperationServer).LogicalBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysql.MysqlOperation/LogicalBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlOperationServer).LogicalBackup(ctx, req.(*LogicalBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlOperation_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlOperationServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysql.MysqlOperation/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlOperationServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlOperation_GtidPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GtidPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlOperationServer).GtidPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysql.MysqlOperation/GtidPurge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlOperationServer).GtidPurge(ctx, req.(*GtidPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MysqlOperation_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MysqlOperationServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mysql.MysqlOperation/SetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MysqlOperationServer).SetVariable(ctx, req.(*SetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MysqlOperation_ServiceDesc is the grpc.ServiceDesc for MysqlOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MysqlOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mysql.MysqlOperation",
	HandlerType: (*MysqlOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clone",
			Handler:    _MysqlOperation_Clone_Handler,
		},
		{
			MethodName: "PhysicalBackup",
			Handler:    _MysqlOperation_PhysicalBackup_Handler,
		},
		{
			MethodName: "LogicalBackup",
			Handler:    _MysqlOperation_LogicalBackup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _MysqlOperation_Restore_Handler,
		},
		{
			MethodName: "GtidPurge",
			Handler:    _MysqlOperation_GtidPurge_Handler,
		},
		{
			MethodName: "SetVariable",
			Handler:    _MysqlOperation_SetVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/agent/app/mysql/pb/mysql.proto",
}
