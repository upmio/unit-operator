// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package milvus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MilvusOperationClient is the client API for MilvusOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilvusOperationClient interface {
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*Response, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Response, error)
}

type milvusOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewMilvusOperationClient(cc grpc.ClientConnInterface) MilvusOperationClient {
	return &milvusOperationClient{cc}
}

func (c *milvusOperationClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/milvus.MilvusOperation/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusOperationClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/milvus.MilvusOperation/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusOperationServer is the server API for MilvusOperation service.
// All implementations must embed UnimplementedMilvusOperationServer
// for forward compatibility
type MilvusOperationServer interface {
	Backup(context.Context, *BackupRequest) (*Response, error)
	Restore(context.Context, *RestoreRequest) (*Response, error)
	mustEmbedUnimplementedMilvusOperationServer()
}

// UnimplementedMilvusOperationServer must be embedded to have forward compatible implementations.
type UnimplementedMilvusOperationServer struct {
}

func (UnimplementedMilvusOperationServer) Backup(context.Context, *BackupRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedMilvusOperationServer) Restore(context.Context, *RestoreRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedMilvusOperationServer) mustEmbedUnimplementedMilvusOperationServer() {}

// UnsafeMilvusOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilvusOperationServer will
// result in compilation errors.
type UnsafeMilvusOperationServer interface {
	mustEmbedUnimplementedMilvusOperationServer()
}

func RegisterMilvusOperationServer(s grpc.ServiceRegistrar, srv MilvusOperationServer) {
	s.RegisterService(&MilvusOperation_ServiceDesc, srv)
}

func _MilvusOperation_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusOperationServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.MilvusOperation/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusOperationServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusOperation_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusOperationServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.MilvusOperation/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusOperationServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MilvusOperation_ServiceDesc is the grpc.ServiceDesc for MilvusOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MilvusOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.MilvusOperation",
	HandlerType: (*MilvusOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Backup",
			Handler:    _MilvusOperation_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _MilvusOperation_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/agent/app/milvus/pb/milvus.proto",
}
